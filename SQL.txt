create table person
(
    person_id nvarchar2(64) constraint person_person_id_pk primary key,
    person_name nvarchar2(64)not null,
    person_email nvarchar2(64),
    person_password nvarchar2(64),
    person_phonenumber nvarchar2(64),
    person_profession nvarchar2(64),
    person_dob date not null,
    person_height numeric(12) not null,
    person_weight numeric(12) not null,
    person_no_of_donation numeric(12) default 0,
    person_bloodgroup nvarchar2(64) not null,
    person_gender nvarchar2(64) not null ,
    person_age numeric(12) null,
    person_prevhistory nvarchar2(64),
    person_chronicdis nvarchar2(64),
    person_apartment nvarchar2(64),
    person_street nvarchar2(64),
    person_city nvarchar2(64),
    person_portal nvarchar2(64),
    person_no_of_purchase numeric(12) default 0,
    person_birth_certificate_no nvarchar2(64) constraint person_birth_certificate_uk unique
);

--Id generation for person (sequence and trigger)
create sequence person_id_gen start with 1; 

CREATE OR REPLACE TRIGGER person_bir 
BEFORE INSERT ON person 
FOR EACH ROW

BEGIN
  SELECT person_id_gen.NEXTVAL
  INTO   :new.person_id
  FROM   dual;
END;

create table eligibility_test
(
    test_id nvarchar2(64) constraint eligibility_test_test_id_pk primary key,
    screening_test_hepatitis_b nvarchar2(64),
    screening_test_hepatitis_c nvarchar2(64),
    screening_test_hiv nvarchar2(64),
    screening_test_syphilis nvarchar2(64),
    test_date date,
    state nvarchar2(64),
    last_date_of_donation date,
    whole_blood_eligibility nvarchar2(64),
    plasma_eligibility nvarchar2(64),
    rbc_eligibility nvarchar2(64),
    wbc_eligibility nvarchar2(64),
    platelets_eligibility nvarchar2(64),
    cryo_eligibility nvarchar2(64)
);

create table event(
 event_id      nvarchar2(64) not null, 
 event_name  nvarchar2(64) not null,
 event_location nvarchar2(64) not null,
 CONSTRAINT event_id_pk PRIMARY KEY (event_id)
);



create table organization(
 org_id      nvarchar2(64) not null, 
 org_contact  nvarchar2(64) not null,
 org_city nvarchar2(64) not null,
 org_postal nvarchar2(64) not null,
 org_branch nvarchar2(64) not null,
 org_street nvarchar2(64) not null,
 org_name nvarchar2(64) not null,
 org_no_of_purchase number default 0,
 org_pass nvarchar2(64) not null,
 CONSTRAINT organization_org_id_pk PRIMARY KEY (org_id)
);

CREATE OR REPLACE TRIGGER org_bir 
BEFORE INSERT ON organization 
FOR EACH ROW

BEGIN
  SELECT org_id_gen.NEXTVAL
  INTO   :new.org_id
  FROM   dual;
END;

create sequence org_id_gen start with 1;


create table medical_officer(
       medical_officer_id nvarchar2(64) not null,
       medical_officer_name  nvarchar2(64) not null, 
       medical_officer_contracttime  date,
       medical_officer_joindate date not null,
 
 
 CONSTRAINT medical_officer_id_pk PRIMARY KEY (medical_officer_id)
     
);


create table tester(

     test_id  nvarchar2(64) not null, 
     tester_result   nvarchar2(64) default null,
     medical_officer_id number not null,
     
     CONSTRAINT tester_medical_officer_id_fk FOREIGN KEY (medical_officer_id)
     REFERENCES medical_officer(medical_officer_id) on delete set null,
     
     CONSTRAINT tester_test_id_fk FOREIGN KEY (test_id)
     REFERENCES eligibility_test(test_id) on delete set null
);


create table donation_request
(
    request_id nvarchar2(64) constraint donation_request_request_id_pk primary key,
    request_date date,
    request_state nvarchar2(64)
);



create table purchase_request(
     purchase_billing_id nvarchar2(64) not null,
     purchase_org_id nvarchar2(64) not null,
     purchase_person_id nvarchar2(64),
     
     purchase_request_id nvarchar2(64) not null,
     purchase_request_status nvarchar2(64),
     purchase_reason nvarchar2(64) not null,
     purchase_request_date date,
     purchase_desired_product nvarchar2(64),
     
     CONSTRAINT purchase_request_id_pk PRIMARY KEY (purchase_request_id),
     
     CONSTRAINT purchase_billing_id_fk FOREIGN KEY (purchase_billing_id)
     REFERENCES billing(billing_id) on delete set null,
     
     CONSTRAINT purchase_org_id_fk FOREIGN KEY (purchase_org_id)
     REFERENCES organization(org_id) on delete set null,
     
     CONSTRAINT purchase_person_id_fk FOREIGN KEY (purchase_person_id)
     REFERENCES person(person_id) on delete set null

);
create table billing(
     billing_id nvarchar2(64),
     billing_total_amount number default 0,
     billing_payment_date date,
     billing_transaction_id nvarchar2(64),
     CONSTRAINT billing_id_pk PRIMARY KEY (billing_id)
);

create table blood_bank(
     blood_bank_event_id nvarchar2(64),
     blood_request_id nvarchar2(64),
     blood_bank_donor_id nvarchar2(64),
     blood_bank_patient_id nvarchar2(64),
     blood_Bank_test_id nvarchar2(64),

     blood_bank_blood_bag_id nvarchar2(64),
     blood_bank_blood_group nvarchar2(10),
     blood_bank_blood_type nvarchar2(64),
     blood_datedonation date ,
     blood_bank_total_no number,
     blood_expiration_date date,
     
     CONSTRAINT blood_bank_bag_id_pk PRIMARY KEY (blood_bank_blood_bag_id),
     
     CONSTRAINT blood_bank_event_id_fk FOREIGN KEY (blood_bank_event_id)
     REFERENCES event(event_id) on delete set null,
     
     CONSTRAINT blood_bank_request_id_fk FOREIGN KEY (blood_request_id)
     REFERENCES purchase_request(purchase_request_id) on delete set null,
     
     CONSTRAINT blood_bank_donor_id_fk FOREIGN KEY (blood_bank_donor_id)
     REFERENCES person(person_id) on delete set null,
     
     CONSTRAINT blood_bank_patient_id_fk FOREIGN KEY (blood_bank_patient_id)
     REFERENCES person(person_id) on delete set null,
     
     CONSTRAINT blood_Bank_test_id_fk FOREIGN KEY (blood_Bank_test_id)
     REFERENCES eligibility_test(test_id) on delete set null
    
     
);
create table eligibility(
     eligibility_person_id nvarchar2(64),
     eligibility_request_id nvarchar2(64),
     eligibility_test_id nvarchar2(64),
     
     
     CONSTRAINT eligibility_person_id_fk FOREIGN KEY (eligibility_person_id)
     REFERENCES person(person_id) on delete set null,
     
     CONSTRAINT eligibility_test_id_fk FOREIGN KEY (eligibility_test_id)
     REFERENCES eligibility_test( test_id) on delete set null,
     
     CONSTRAINT eligibility_request_id_fk FOREIGN KEY (eligibility_request_id)
     REFERENCES donation_request(request_id) on delete set null
);

